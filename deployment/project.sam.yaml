---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: >-
  ML Project template for running in the frugal-MLOps demo environment.

Parameters:
  ProjectId:
    Description: Used as a prefix for project resources.  3-15 characters, lowercase letters (a-z) only.
    Type: String
    Default: forestcover
    AllowedPattern: "^[a-z]{3,15}"
    ConstraintDescription: The ProjectId can be 3-15 characters, lowercase letters (a-z) only.

  ManagerEmail:
    Description: Project manager email address, to which approval requests for deployments will be sent.
    Type: String
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: Must be a valid email address.

  SageMakerProjectId:
    Description: Service generated Id of the project (leave blank if provisioning outside SageMaker).
    Type: String
    Default: ''

  SageMakerProjectName:
    Description: Name of the project per SageMaker Projects
    Type: String
    AllowedPattern: "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$"
    Default: 'arfbarf'

Resources:

##########  REPOSITORIES  ##########
  # Source code repository (not currently used in the sample notebooks)
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Sub '${ProjectId}'
      RepositoryDescription: !Sub '${ProjectId} data science project repository'

  CodeCommitRepositoryParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ID of the project CodeCommit repository
      Name: !Sub '/${ProjectId}-Project/CodeCommit'
      Type: String
      Value: !Ref CodeCommitRepository

  # Source data bucket (target for modelling)
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  SourceBucketParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ID of the project data source bucket
      Name: !Sub '/${ProjectId}-Project/SourceBucket'
      Type: String
      Value: !Ref SourceBucket

  # Model artifacts bucket (trained models, reports, etc)
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  ArtifactsBucketParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ID of the project artifacts bucket
      Name: !Sub '/${ProjectId}-Project/ArtifactsBucket'
      Type: String
      Value: !Ref ArtifactsBucket

  # Live monitoring bucket (endpoint data capture, baselines, etc)
  LiveMonitoringBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  LiveMonitoringBucketParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ID of the project monitoring bucket
      Name: !Sub '/${ProjectId}-Project/MonitoringBucket'
      Type: String
      Value: !Ref LiveMonitoringBucket


##########  PERMISSIONS  ##########
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-LambdaRole'
      Path: !Sub '/${ProjectId}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        # TODO: Scope these permissions down
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  ModelRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-ModelRole'
      Path: !Sub '/${ProjectId}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        # TODO: Scope these permissions down
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # A lot of this is just copied from AmazonSageMakerFullAccess (which we don't currently grant to
  # ProjectSudoRole, in prep for trying to trim down the access)
  ProjectDataSciencePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${ProjectId}-ProjectDataScience'
      Path: !Sub '/MLEnv/Projects/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CodeCommitReadAccess
            Effect: Allow
            Action:
              - 'codecommit:BatchGet*'
              - 'codecommit:Describe*'
              - 'codecommit:Get*'
              - 'codecommit:GetRepository'
              - 'codecommit:GitPull'
              - 'codecommit:List*'
            Resource:
              - !GetAtt CodeCommitRepository.Arn
          # TODO: How should we scope ECR access when may be many-many mapping with projects?
          # - Sid: ECRAccess
          #   Effect: Allow
          #   Action:
          #     # These actions are restricted in SageMakerFullAccess to:
          #     # "Resource": "arn:aws:ecr:*:*:repository/*sagemaker*"
          #     - 'ecr:SetRepositoryPolicy'
          #     - 'ecr:CompleteLayerUpload'
          #     - 'ecr:BatchDeleteImage'
          #     - 'ecr:UploadLayerPart'
          #     - 'ecr:DeleteRepositoryPolicy'
          #     - 'ecr:InitiateLayerUpload'
          #     - 'ecr:DeleteRepository'
          #     - 'ecr:PutImage'
          #     # These actions are for all resources in SageMakerFullAccess:
          #     - 'ecr:BatchCheckLayerAvailability'
          #     - 'ecr:BatchGetImage'
          #     - 'ecr:CreateRepository'
          #     - 'ecr:Describe*'
          #     - 'ecr:GetAuthorizationToken'
          #     - 'ecr:GetDownloadUrlForLayer'
          #     - 'ecr:StartImageScan'
          #   Resource: '*'
          - Sid: IAMPassRole
            Effect: Allow
            Action: 
              - 'iam:PassRole'
            Resource: 'arn:aws:iam::*:role/*'  # TODO: Surely just *this* role?
            Condition:
              StringEquals:
                iam:PassedToService:
                  - 'sagemaker.amazonaws.com'
                  - 'glue.amazonaws.com'
                  - 'robomaker.amazonaws.com'
                  - 'states.amazonaws.com'
          - Sid: S3Global
            Effect: Allow
            Action:
              - 's3:ListAllMyBuckets'
            Resource: '*'
          - Sid: S3ReadOnlyActions
            Effect: Allow
            Action:
              - 's3:DescribeJob'
              - 's3:GetAccessPoint*'
              - 's3:GetAccountPublicAccessBlock'
              - 's3:GetAnalyticsConfiguration'
              - 's3:GetBucket*'
              - 's3:GetEncryptionConfiguration'
              - 's3:GetInventoryConfiguration'
              - 's3:GetLifecycleConfiguration'
              - 's3:GetMetricsConfiguration'
              - 's3:GetObject*'
              - 's3:ListBucket*'
              - 's3:ListBucketVersions'
            Resource:
              - !GetAtt SourceBucket.Arn
              - !Sub '${SourceBucket.Arn}/*'
              - !GetAtt ArtifactsBucket.Arn
              - !Sub '${ArtifactsBucket.Arn}/*'
              - !GetAtt LiveMonitoringBucket.Arn
              - !Sub '${LiveMonitoringBucket.Arn}/*'
          - Sid: SSMParamRead
            # Allow notebook to read SSM params to locate buckets/etc
            # (NOTE: This wildcarding allows datasci to see the location of other datasci's sandboxes)
            Effect: Allow
            Action:
              - 'ssm:GetParameter'
              - 'ssm:GetParameterHistory'
              - 'ssm:GetParameters'
              - 'ssm:GetParametersByPath'
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectId}-Project/*'
          - Sid: STSAssumeProjectSudoRole
            Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource:
              - !GetAtt ProjectSudoRole.Arn
          - Sid: IAMCreateAutoScalingRole
            Effect: Allow
            Action: 'iam:CreateServiceLinkedRole'
            Resource: 'arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint'
            Condition:
              StringLike:
                iam:AWSServiceName: 'sagemaker.application-autoscaling.amazonaws.com'
          - Sid: AutoScaling
            Effect: Allow
            Action:
              - 'application-autoscaling:DeleteScalingPolicy'
              - 'application-autoscaling:DeleteScheduledAction'
              - 'application-autoscaling:DeregisterScalableTarget'
              - 'application-autoscaling:DescribeScalableTargets'
              - 'application-autoscaling:DescribeScalingActivities'
              - 'application-autoscaling:DescribeScalingPolicies'
              - 'application-autoscaling:DescribeScheduledActions'
              - 'application-autoscaling:PutScalingPolicy'
              - 'application-autoscaling:PutScheduledAction'
              - 'application-autoscaling:RegisterScalableTarget'
            Resource: '*'  # TODO: Scope Down
          - Sid: Other
            Effect: Allow
            Action:
              - 'aws-marketplace:ViewSubscriptions'
              - 'cloudwatch:DeleteAlarms'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:GetMetricData'
              - 'cloudwatch:GetMetricStatistics'
              - 'cloudwatch:ListMetrics'
              - 'cloudwatch:PutMetricAlarm'
              - 'cloudwatch:PutMetricData'
              - 'cognito-idp:AdminAddUserToGroup'
              - 'cognito-idp:AdminCreateUser'
              - 'cognito-idp:AdminDeleteUser'
              - 'cognito-idp:AdminDisableUser'
              - 'cognito-idp:AdminEnableUser'
              - 'cognito-idp:AdminRemoveUserFromGroup'
              - 'cognito-idp:CreateGroup'
              - 'cognito-idp:CreateUserPool'
              - 'cognito-idp:CreateUserPoolClient'
              - 'cognito-idp:CreateUserPoolDomain'
              - 'cognito-idp:DescribeUserPool'
              - 'cognito-idp:DescribeUserPoolClient'
              - 'cognito-idp:List*'
              - 'cognito-idp:UpdateUserPool'
              - 'cognito-idp:UpdateUserPoolClient'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:CreateVpcEndpoint'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:DescribeDhcpOptions'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DescribeRouteTables'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeVpcEndpoints'
              - 'ec2:DescribeVpcs'
              - 'elastic-inference:Connect'
              - 'elasticfilesystem:DescribeFileSystems'
              - 'elasticfilesystem:DescribeMountTargets'
              - 'fsx:DescribeFileSystems'
              - 'glue:CreateJob'
              - 'glue:DeleteJob'
              - 'glue:GetJob'
              - 'glue:GetJobRun'
              - 'glue:GetJobRuns'
              - 'glue:GetJobs'
              - 'glue:ResetJobBookmark'
              - 'glue:StartJobRun'
              - 'glue:UpdateJob'
              - 'groundtruthlabeling:*'
              - 'iam:ListRoles'
              - 'kms:DescribeKey'
              - 'kms:ListAliases'
              - 'lambda:ListFunctions'
              - 'logs:CreateLogDelivery'
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:DeleteLogDelivery'
              - 'logs:Describe*'
              - 'logs:GetLogDelivery'
              - 'logs:GetLogEvents'
              - 'logs:ListLogDeliveries'
              - 'logs:PutLogEvents'
              - 'logs:PutResourcePolicy'
              - 'logs:UpdateLogDelivery'
              - 'secretsmanager:ListSecrets'
              - 'sns:ListTopics'
            Resource: '*'

  ProjectDataSciencePolicyArnParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ARN of the project's 'sudo' role
      Name: !Sub '/${ProjectId}-Project/DataSciencePolicyArn'
      Type: String
      Value: !Ref ProjectDataSciencePolicy

  ProjectWriteAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${ProjectId}-ProjectWriteAccess'
      Path: !Sub '/MLEnv/Projects/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CodeCommitAdminAccess
            Effect: Allow
            Action:
              - 'codecommit:*'
            Resource:
              - !GetAtt CodeCommitRepository.Arn
          - Sid: S3ReadOnlyActions
            Effect: Allow
            Action:
              - 's3:DescribeJob'
              - 's3:GetAccessPoint*'
              - 's3:GetAccountPublicAccessBlock'
              - 's3:GetAnalyticsConfiguration'
              - 's3:GetBucket*'
              - 's3:GetEncryptionConfiguration'
              - 's3:GetInventoryConfiguration'
              - 's3:GetLifecycleConfiguration'
              - 's3:GetMetricsConfiguration'
              - 's3:GetObject*'
              - 's3:ListBucket*'
              - 's3:ListBucketVersions'
            Resource:
              - !GetAtt SourceBucket.Arn
              - !Sub '${SourceBucket.Arn}/*'
              - !GetAtt ArtifactsBucket.Arn
              - !Sub '${ArtifactsBucket.Arn}/*'
              - !GetAtt LiveMonitoringBucket.Arn
              - !Sub '${LiveMonitoringBucket.Arn}/*'
          - Sid: S3WritableActions
            Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:DeleteObject*'
              - 's3:GetObject'
              - 's3:ListMultipartUploadParts'
              - 's3:PutObject'
              - 's3:PutObjectTagging'
              - 's3:RestoreObject'
              - 's3:AbortMultipartUpload'
            Resource:
              - !GetAtt SourceBucket.Arn
              - !Sub '${SourceBucket.Arn}/*'
              - !GetAtt ArtifactsBucket.Arn
              - !Sub '${ArtifactsBucket.Arn}/*'
              - !GetAtt LiveMonitoringBucket.Arn
              - !Sub '${LiveMonitoringBucket.Arn}/*'

  # An assumable role for data scientists to perform elevated tasks without always running
  ProjectSudoRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-ProjectSudoRole'
      Path: !Sub '/${ProjectId}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            # Here we allow *any* /MLEnv/DataScienceRoles/* to assume the project Sudo role from trust policy
            # side, because only those who have been granted permission to sts:AssumeRole on this role will
            # be able to anyway. No wildcarding supported in Principal, so we do it via Condition instead.
            Principal:
              AWS: 'arn:aws:iam::024103970757:root'
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringLike:
                # (Not sure why it's 'role' as opposed to 'assumed-role', but whatever)
                aws:PrincipalArn: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/MLEnv/DataScienceRoles/*'
      ManagedPolicyArns:
        - !Ref ProjectWriteAccessPolicy

  ProjectSudoRoleParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ARN of the project's 'sudo' role
      Name: !Sub '/${ProjectId}-Project/SudoRole'
      Type: String
      Value: !GetAtt ProjectSudoRole.Arn

  # Policy for Step Functions to access X-Ray (as created by default in SFn console)
  StepFunctionsXRayAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${ProjectId}-StepFnXRayAccess'
      Path: !Sub '/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
              - 'xray:GetSamplingRules'
              - 'xray:GetSamplingTargets'
            Resource: '*'

  # Policy for Step Functions to log to CloudWatch (as created by default in SFn console)
  CloudWatchLogsDeliveryFullAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${ProjectId}-CWLogsDeliveryFullAccess'
      Path: !Sub '/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogDelivery'
              - 'logs:GetLogDelivery'
              - 'logs:UpdateLogDelivery'
              - 'logs:DeleteLogDelivery'
              - 'logs:ListLogDeliveries'
              - 'logs:PutResourcePolicy'
              - 'logs:DescribeResourcePolicies'
              - 'logs:DescribeLogGroups'
            Resource: '*'

  StepFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-StepFunctionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        # TODO: Restrict down Lambda/SageMaker access to targets only
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - !Ref StepFunctionsXRayAccessPolicy
        - !Ref CloudWatchLogsDeliveryFullAccessPolicy

  ApiGatewayToStepFunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-ApiToSFNRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        # TODO: Restrict down SFN access to target state machines only

  ApiGatewayAccount:
    # Important in case no APIs have been deployed in this AWS account before
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayToStepFunctionsRole.Arn


##########  PROJECT API  ##########
# We want to be able to generate clickable credential-free (just token-based) action links for emails, and
# maybe some other tools too... So will deploy these endpoints on a project API
  ProjectApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ProjectId} Management API'
      Description: !Sub 'API for ${ProjectId} project management actions'
      FailOnWarnings: true

  ApprovalResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ProjectApi
      ParentId: !GetAtt ProjectApi.RootResourceId
      PathPart: respond

  ApprovalMethod:
    # Rather than adding in an extra Lambda function, direct API Gateway integration can handle the basics:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ProjectApi
      ResourceId: !Ref ApprovalResource
      HttpMethod: GET  # (It's a GET because users will be clicking a generated link to open in browser)
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.taskToken: true  # true->Required, the Step Functions task token
        method.request.querystring.action: true  # true->Required, the decision (approved/rejected)
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:states:action/SendTaskSuccess'
        Credentials: !GetAtt ApiGatewayToStepFunctionsRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: |-
            {
              "output": "{ \"Status\": \"$input.params('action')\" }",
              "taskToken": "$input.params('taskToken')"
            }
        IntegrationResponses:
          # We'll directly show simple HTML result pages, but of course you could redirect or do all sorts:
          - SelectionPattern: 2\d{2}
            StatusCode: 200
            ResponseTemplates:
              text/html: |-
                <html>
                  <body>
                    <h1>Thank you</h1>
                    <p>You may now close this page</p>
                  </body>
                </html>
            ResponseParameters:
              method.response.header.Content-Type: "'text/html'"
          - SelectionPattern: 4\d{2}
            StatusCode: 400
            ResponseTemplates:
              text/html: |-
                <html>
                  <body>
                    <h1>Not permitted</h1>
                    <p>This request has timed out or already been responded to.</p>
                  </body>
                </html>
            ResponseParameters:
              method.response.header.Content-Type: "'text/html'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Content-Type: true

  ProjectApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref ProjectApi
      StageName: states

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ApprovalMethod
    Properties:
      RestApiId: !Ref ProjectApi
      #StageName: dummy

##########  PIPELINE  ##########
  CommonCodeLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      LayerName: common-utils
      Description: Dependencies for take action code
      ContentUri: ../functions/common-util-layer/
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Retain

  FunctionRegisterModel:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectId}-RegisterModel'
      Description: Register a model from sandbox to project
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.8
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      Environment:
        Variables:
          PROJECT_ID: !Ref ProjectId
          PROJECT_BUCKET: !Ref ArtifactsBucket
          PROJECT_MODEL_ROLE_ARN: !GetAtt ModelRole.Arn
      CodeUri: ../functions/register-model/
      Layers:
        - !Ref CommonCodeLayer

  FunctionRequestApproval:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectId}-RequestApproval'
      Description: Send approval request emails for queued models
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.8
      Role: !GetAtt LambdaRole.Arn
      Timeout: 90
      CodeUri: ../functions/request-approval/
      Layers:
        - !Ref CommonCodeLayer

  FunctionPrepareDeploymentConfigs:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectId}-PrepareDeploymentConfigs'
      Description: Check current status of an endpoint and prepare configurations for deployment
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.8
      Role: !GetAtt LambdaRole.Arn
      Timeout: 90
      Environment:
        Variables:
          MONITORING_BUCKET: !Ref LiveMonitoringBucket
      CodeUri: ../functions/prepare-deployment-configs/
      Layers:
        - !Ref CommonCodeLayer

  ApprovalEmailTopic:
    # Actually just a backup in case we're not able to use SES (see FunctionRequestApproval code)
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Sub ${ManagerEmail}
          Protocol: email

  FunctionIsEndpointUpdated:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectId}-IsEndpointUpdated'
      Description: Check whether SageMaker endpoint is in target state
      Handler: main.handler
      MemorySize: 128
      Runtime: python3.8
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      CodeUri: ../functions/is-endpoint-updated/
      Layers:
        - !Ref CommonCodeLayer

  PipelineLogGroup:
    Type: 'AWS::Logs::LogGroup'
    # Properties:
    #   LogGroupName: # Whatevs, the default isn't too bad?
    #   RetentionInDays: # 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653

  PipelineStateMachine:
    Type: 'AWS::Serverless::StateMachine'
    Properties:
      # Omitting name gives PipelineStateMachine-[GARBAGE], which might be nice enough for you but might not!
      Name: !Sub '${ProjectId}-PipelineMachine'
      DefinitionUri: ../state-machines/SubmitForestCoverModel.asl.json
      DefinitionSubstitutions:
        FunctionIsEndpointUpdatedArn: !GetAtt FunctionIsEndpointUpdated.Arn
        FunctionPrepareDeploymentConfigsArn: !GetAtt FunctionPrepareDeploymentConfigs.Arn
        FunctionRegisterModelArn: !GetAtt FunctionRegisterModel.Arn
        FunctionRequestApprovalName: !Ref FunctionRequestApproval
        ManagerEmail: !Ref ManagerEmail
        # TODO: Link URIs to stage name and resource paths!
        ApprovalUri: !Sub 'https://${ProjectApi}.execute-api.${AWS::Region}.amazonaws.com/states/respond?action=Approved'
        RejectionUri: !Sub 'https://${ProjectApi}.execute-api.${AWS::Region}.amazonaws.com/states/respond?action=Rejected'
        EmailTopic: !Ref ApprovalEmailTopic
        ArtifactsBucket: !Ref ArtifactsBucket
        SourceBucket: !Ref SourceBucket
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt PipelineLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL  # or ERROR, FATAL, OFF (default)
      Role: !GetAtt StepFunctionRole.Arn
      Type: STANDARD
      # Tags:
      #   - Key: ...
      #     Value: ...

  PipelineParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ARN of the project's model submission pipeline
      Name: !Sub '/${ProjectId}-Project/PipelineStateMachine'
      Type: String
      Value: !Ref PipelineStateMachine
