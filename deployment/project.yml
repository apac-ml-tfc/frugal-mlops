# CloudFormation for an ML project (potentially touching several containers, users)
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  ProjectId:
    Description: Used as a prefix for project resources.  Can be up to 12 characters, lowercase letters (a-z) only.
    Type: String
    Default: forestcover
    AllowedPattern: "^[a-z]{1,12}"
    ConstraintDescription: The ProjectId can be up to 12 characters, lowercase letters (a-z) only.
  ManagerEmail:
    Description: Project manager email address, to which approval requests for deployments will be sent.
    Type: String
    AllowedPattern: "^[\\x20-\\x45]?[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
    ConstraintDescription: Must be a valid email address.
Resources:


##########  REPOSITORIES  ##########
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Sub '${ProjectId}'
      RepositoryDescription: !Sub '${ProjectId} data science project repository'

  CodeCommitRepositoryParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ID of the project CodeCommit repository
      Name: !Sub '/${ProjectId}-Project/CodeCommit'
      Type: String
      Value: !Ref CodeCommitRepository

  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectId}-source'

  SourceBucketParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ID of the project data source bucket
      Name: !Sub '/${ProjectId}-Project/SourceBucket'
      Type: String
      Value: !Ref SourceBucket

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectId}-artifacts'

  ArtifactsBucketParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ID of the project artifacts bucket
      Name: !Sub '/${ProjectId}-Project/ArtifactsBucket'
      Type: String
      Value: !Ref ArtifactsBucket

  LiveMonitoringBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectId}-monitoring'

  LiveMonitoringBucketParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ID of the project monitoring bucket
      Name: !Sub '/${ProjectId}-Project/MonitoringBucket'
      Type: String
      Value: !Ref LiveMonitoringBucket


##########  PERMISSIONS  ##########
# TODO: Everything very open at the moment to get things working
  LambdaAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-LambdaAdminRole'
      Path: !Sub '/${ProjectId}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  ModelAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-ModelAdminRole'
      Path: !Sub '/${ProjectId}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  ProjectBucketsFullAccessPolicy:
    # (As created by default in StepFunctions console)
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${ProjectId}-ProjectS3FullAccess'
      Path: !Sub '/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt SourceBucket.Arn
              - !Sub '${SourceBucket.Arn}/*'
              - !GetAtt ArtifactsBucket.Arn
              - !Sub '${ArtifactsBucket.Arn}/*'
              - !GetAtt LiveMonitoringBucket.Arn
              - !Sub '${LiveMonitoringBucket.Arn}/*'

  ProjectSudoRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-ProjectSudoRole'
      Path: !Sub '/${ProjectId}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS: !GetAtt DataScienceRole.Arn
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              # TEMP: For development under constant SMStudio role:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AmazonSageMaker-PowerRole'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
        - !Ref ProjectBucketsFullAccessPolicy

  ProjectSudoRoleParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ARN of the project's 'sudo' role
      Name: !Sub '/${ProjectId}-Project/SudoRole'
      Type: String
      Value: !GetAtt ProjectSudoRole.Arn


  AllowAssumeProjectSudoPolicy:
    # Note identities must also be added to the trust relationship of the role!
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${ProjectId}-AllowAssumeProjectSudoRole'
      Path: !Sub '/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            # A kinda hacky/simplified way to avoid circular dependency:
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ProjectId}/${ProjectId}-ProjectSudoRole'
            #Resource: !GetAtt ProjectSudoRole.Arn

  DataScienceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-DataScienceRole'
      Path: !Sub '/${ProjectId}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
        - !Ref AllowAssumeProjectSudoPolicy

  StepFunctionsXRayAccessPolicy:
    # (As created by default in StepFunctions console)
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${ProjectId}-StepFnXRayAccess'
      Path: !Sub '/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
              - 'xray:GetSamplingRules'
              - 'xray:GetSamplingTargets'
            Resource: '*'

  CloudWatchLogsDeliveryFullAccessPolicy:
    # (As created by default in StepFunctions console)
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${ProjectId}-CWLogsDeliveryFullAccess'
      Path: !Sub '/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogDelivery'
              - 'logs:GetLogDelivery'
              - 'logs:UpdateLogDelivery'
              - 'logs:DeleteLogDelivery'
              - 'logs:ListLogDeliveries'
              - 'logs:PutResourcePolicy'
              - 'logs:DescribeResourcePolicies'
              - 'logs:DescribeLogGroups'
            Resource: '*'

  StepFunctionAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-StepFunctionAdminRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - !Ref StepFunctionsXRayAccessPolicy
        - !Ref CloudWatchLogsDeliveryFullAccessPolicy

  ApiGatewayToStepFunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectId}-ApiToSFNRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        # TODO: Restrict down SFN access to target state machines only

  ApiGatewayAccount:
    # Important in case no APIs have been deployed in this AWS account before
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayToStepFunctionsRole.Arn


##########  PROJECT API  ##########
# We want to be able to generate clickable credential-free (just token-based) action links for emails, and
# maybe some other tools too... So will deploy these endpoints on a project API
  ProjectApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ProjectId} Management API'
      Description: !Sub 'API for ${ProjectId} project management actions'
      FailOnWarnings: true

  ApprovalResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ProjectApi
      ParentId: !GetAtt ProjectApi.RootResourceId
      PathPart: respond

  ApprovalMethod:
    # Rather than adding in an extra Lambda function, direct API Gateway integration can handle the basics:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ProjectApi
      ResourceId: !Ref ApprovalResource
      HttpMethod: GET  # (It's a GET because users will be clicking a generated link to open in browser)
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.taskToken: true  # true->Required, the Step Functions task token
        method.request.querystring.action: true  # true->Required, the decision (approved/rejected)
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:states:action/SendTaskSuccess'
        Credentials: !GetAtt ApiGatewayToStepFunctionsRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: |-
            {
              "output": "{ \"Status\": \"$input.params('action')\" }",
              "taskToken": "$input.params('taskToken')"
            }
        IntegrationResponses:
          # We'll directly show simple HTML result pages, but of course you could redirect or do all sorts:
          - SelectionPattern: 2\d{2}
            StatusCode: 200
            ResponseTemplates:
              text/html: |-
                <html>
                  <body>
                    <h1>Thank you</h1>
                    <p>You may now close this page</p>
                  </body>
                </html>
            ResponseParameters:
              method.response.header.Content-Type: "'text/html'"
          - SelectionPattern: 4\d{2}
            StatusCode: 400
            ResponseTemplates:
              text/html: |-
                <html>
                  <body>
                    <h1>Not permitted</h1>
                    <p>This request has timed out or already been responded to.</p>
                  </body>
                </html>
            ResponseParameters:
              method.response.header.Content-Type: "'text/html'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Content-Type: true

  ProjectApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref ProjectApi
      StageName: states

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ApprovalMethod
    Properties:
      RestApiId: !Ref ProjectApi
      #StageName: dummy

##########  PIPELINE  ##########
  CommonCodeLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-utils
      Description: Dependencies for take action code
      ContentUri: ../functions/common-util-layer/
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Retain

  FunctionRegisterModel:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectId}-RegisterModel'
      Description: Register a model from sandbox to project
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.8
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 30
      Environment:
        Variables:
          PROJECT_ID: !Ref ProjectId
          PROJECT_BUCKET: !Ref ArtifactsBucket
          PROJECT_MODEL_ROLE_ARN: !GetAtt ModelAdminRole.Arn
      CodeUri: ../functions/register-model/
      Layers:
        - !Ref CommonCodeLayer

  FunctionRequestApproval:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectId}-FunctionRequestApproval'
      Description: Send approval request emails for queued models
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.8
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 90
      CodeUri: ../functions/request-approval/
      Layers:
        - !Ref CommonCodeLayer

  FunctionCheckEndpointStatus:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectId}-FunctionCheckEndpointStatus'
      Description: Check status of an endpoint by name for challenger deployment
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.8
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 90
      CodeUri: ../functions/check-endpoint-status/
      Layers:
        - !Ref CommonCodeLayer

  ApprovalEmailTopic:
    # Actually just a backup in case we're not able to use SES (see FunctionRequestApproval code)
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Sub ${ManagerEmail}
          Protocol: email

  PipelineLogGroup:
    Type: AWS::Logs::LogGroup
    # Properties:
    #   LogGroupName: # Whatevs, the default isn't too bad?
    #   RetentionInDays: # 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653

  PipelineStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Omitting name gives PipelineStateMachine-[GARBAGE], which might be nice enough for you but might not!
      Name: !Sub '${ProjectId}-PipelineMachine'
      DefinitionUri: ../state-machines/SubmitForestCoverModel.asl.json
      DefinitionSubstitutions:
        FunctionCheckEndpointStatusName: !Ref FunctionCheckEndpointStatus
        FunctionRegisterModelName: !Ref FunctionRegisterModel
        FunctionRequestApprovalName: !Ref FunctionRequestApproval
        ManagerEmail: !Ref ManagerEmail
        # TODO: Link URIs to stage name and resource paths!
        ApprovalUri: !Sub 'https://${ProjectApi}.execute-api.${AWS::Region}.amazonaws.com/states/respond?action=Approved'
        RejectionUri: !Sub 'https://${ProjectApi}.execute-api.${AWS::Region}.amazonaws.com/states/respond?action=Rejected'
        EmailTopic: !Ref ApprovalEmailTopic
        ArtifactsBucket: !Ref ArtifactsBucket
        SourceBucket: !Ref SourceBucket
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt PipelineLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL  # or ERROR, FATAL, OFF (default)
      Role: !GetAtt StepFunctionAdminRole.Arn
      Type: STANDARD
      # Tags:
      #   - Key: ...
      #     Value: ...

  PipelineParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: ARN of the project's model submission pipeline
      Name: !Sub '/${ProjectId}-Project/PipelineStateMachine'
      Type: String
      Value: !Ref PipelineStateMachine
